{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"11CseGnI6TCX8DLmwgbv4X8PAodB1F0X2","timestamp":1714728645111}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zx3jYiz7zBPu","outputId":"dbf21d16-1d91-4ade-f118-b3809516c06d","executionInfo":{"status":"ok","timestamp":1715763212367,"user_tz":-540,"elapsed":2711,"user":{"displayName":"Ryujin","userId":"11057201220526475886"}}},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"laRwUniEjfPt","outputId":"d077e8d6-d13a-4495-e09a-8980fb6b1763","executionInfo":{"status":"ok","timestamp":1715764084756,"user_tz":-540,"elapsed":12767,"user":{"displayName":"Ryujin","userId":"11057201220526475886"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["텍스트를 입력하세요: 안녕하세요, 한국공학대학교 첨단제조혁신원 교육 담당자 박주희입니다. 중소벤처기업부 인증_스마트공장 전문인력양성사업_단기 프로그램 교육 안내 문자 드리오니 많은 신청 부탁드립니다. (점심제공/80% 이상 출결 시 수료증 발급 / 학기중 진행되는 교육으로 정규수업으로 인한 조퇴/지각 일부허용) **교육문의 : 031-8041-1585 **신청방법 : https://amic.tukorea.ac.kr/ **교육별 커리큘럼 홈페이지 공지사항 참조 **혹 문자 수신을 원하지 않으신다면 스팸등록 부탁드립니다. 감사합니다*^^*\n","이 URL은 73.00% 확률로 피싱 사이트가 아닙니다.\n","1/1 [==============================] - 4s 4s/step\n","100.00% 확률로 스미싱입니다.\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import re\n","from transformers import BertTokenizer\n","from tensorflow.keras.models import load_model\n","import joblib\n","# 텍스트 및 URL 모델 불러오기\n","tokenizer = BertTokenizer.from_pretrained('bert-base-multilingual-cased')\n","text_model_path = '/content/drive/MyDrive/smishing_model_grumodified.h5'\n","text_model = load_model(text_model_path)\n","\n","vectorizer_path = '/content/drive/MyDrive/vectorizer.pkl'\n","url_model_path = '/content/drive/MyDrive/rf_classifier.pkl'\n","vectorizer = joblib.load(vectorizer_path)\n","url_model = joblib.load(url_model_path)\n","\n","def find_urls(string):\n","    # URL 찾기 위한 정규 표현식\n","    regex = r\"(https?://[^\\s]+)\"\n","    urls = re.findall(regex, string)\n","    return urls\n","\n","def classify_smishing(input_text):\n","    encoded_dict = tokenizer.encode_plus(\n","                        input_text,\n","                        add_special_tokens=True,\n","                        max_length=100,\n","                        padding='max_length',\n","                        truncation=True,\n","                        return_attention_mask=False,\n","                        return_tensors='tf',\n","                   )\n","    input_ids = encoded_dict['input_ids']\n","    smishing_score = text_model.predict(input_ids)[0][0]\n","\n","    if smishing_score > 0.5:\n","        print(\"{:.2f}% 확률로 스미싱입니다.\".format(smishing_score * 100))\n","    else:\n","        print(\"{:.2f}% 확률로 일반 메시지입니다.\".format((1 - smishing_score) * 100))\n","\n","def predict_phishing(url):\n","    url_vector = vectorizer.transform([url])\n","    prediction = url_model.predict(url_vector)\n","    probability = url_model.predict_proba(url_vector)\n","\n","    if prediction == 1:\n","        print(\"이 URL은 {:.2f}% 확률로 피싱 사이트입니다.\".format(probability[0][1]*100))\n","        return True\n","    else:\n","        print(\"이 URL은 {:.2f}% 확률로 피싱 사이트가 아닙니다.\".format(probability[0][0]*100))\n","        return False\n","\n","# 메인 함수\n","def main():\n","    user_input_text = input(\"텍스트를 입력하세요: \")\n","    urls = find_urls(user_input_text)\n","    phishing_detected = False\n","\n","    if urls:\n","        # URL이 있으면 각각의 URL에 대해 피싱 여부 판별\n","        for url in urls:\n","            if predict_phishing(url):\n","                phishing_detected = True\n","                break  # 피싱 URL 발견 시 중단\n","\n","        # 피싱 URL이 발견되지 않고, URL 외의 텍스트가 있을 경우 스미싱 판별\n","        if not phishing_detected:\n","            # URL을 제외한 나머지 텍스트 추출\n","            remaining_text = re.sub(r\"(https?://[^\\s]+)\", \"\", user_input_text).strip()\n","            if remaining_text:  # 남은 텍스트가 있다면 스미싱 판별\n","                classify_smishing(remaining_text)\n","    else:\n","        # URL이 없으면 입력된 전체 텍스트에 대해 스미싱 여부 판별\n","        classify_smishing(user_input_text)\n","\n","main()\n"]},{"cell_type":"code","source":[],"metadata":{"id":"PhSbiyabe_Nf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"QNIin8FPzEtt","executionInfo":{"status":"ok","timestamp":1715763298035,"user_tz":-540,"elapsed":11,"user":{"displayName":"Ryujin","userId":"11057201220526475886"}}},"execution_count":3,"outputs":[]}]}